bucket_options = {
    128: [
        (64, 192), (80, 160), (96, 144), (112, 128),
        (128, 112), (144, 96), (160, 80), (192, 64),
    ],
    256: [
        (128, 384), (144, 352), (160, 320), (176, 288),
        (192, 256), (208, 240), (224, 224), (240, 208),
        (256, 192), (288, 176), (320, 160), (352, 144),
        (384, 128),
    ],
    384: [
        (256, 576), (272, 544), (288, 512), (304, 480),
        (320, 448), (336, 416), (352, 384), (368, 352),
        (384, 320), (416, 304), (448, 288), (480, 272),
        (512, 256), (544, 240), (576, 224),
    ],
    512: [
        (320, 768), (352, 704), (384, 640), (416, 608),
        (448, 576), (480, 544), (512, 512), (544, 480),
        (576, 448), (608, 416), (640, 384), (704, 352),
        (768, 320),
    ],
    640: [
        (416, 960), (448, 864), (480, 832), (512, 768),
        (544, 704), (576, 672), (608, 640), (640, 608),
        (672, 576), (704, 544), (768, 512), (832, 480),
        (864, 448), (960, 416),
    ],
    768: [
        (512, 1152), (544, 1056), (576, 1024), (608, 960),
        (640, 896), (672, 864), (704, 832), (736, 768),
        (768, 736), (800, 704), (832, 672), (864, 640),
        (896, 608), (960, 576), (1024, 544), (1056, 512),
        (1152, 512),
    ],
    896: [
        (608, 1344), (640, 1216), (672, 1152), (704, 1088),
        (736, 1024), (768, 960), (800, 928), (832, 896),
        (864, 864), (896, 832), (928, 800), (960, 768),
        (1024, 736), (1088, 704), (1152, 672), (1216, 640),
        (1344, 608),
    ],
    1024: [
        (704, 1536), (736, 1408), (768, 1344), (800, 1280),
        (832, 1216), (864, 1152), (896, 1088), (928, 1056),
        (960, 1024), (992, 992), (1024, 960), (1056, 928),
        (1088, 896), (1152, 864), (1216, 832), (1280, 800),
        (1344, 768), (1408, 736), (1536, 704),
    ],
}



def find_nearest_bucket(h, w, resolution=640):
    min_metric = float('inf')
    best_bucket = None
    for (bucket_h, bucket_w) in bucket_options[resolution]:
        metric = abs(h * bucket_w - w * bucket_h)
        if metric <= min_metric:
            min_metric = metric
            best_bucket = (bucket_h, bucket_w)
    return best_bucket

